import axios from "axios";
import React, { useState } from "react";
import { useParams } from "react-router-dom";

function Login() {
  //   const params = useParams();
  //   console.log(params);
  const user = { username: "", password: "" };
  const [error, seterror] = useState(user);

  const usernamecheck = (event: any) => {
    seterror({
      username: "",
      password: "",
    });
    if (event.target.value.includes(" ")) {
      showError("username", "Username cannot have spaces in between");
    }
    var format = /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
    if (format.test(event.target.value)) {
      showError("username", "Username cannot have special charcters");
    }
    if (event.target.value.length < 6) {
      showError("username", "Username should be greater in length");
    }
  };
  const passcheck = (event: any) => {
    seterror({
      username: "",
      password: "",
    });
    if (event.target.value.includes(" ")) {
      showError("password", "Password cannot have spaces in between");
    }

    if (event.target.value.length < 6) {
      showError("password", "Password should be greater in length");
    }
  };
  const submit = async (event: any) => {
    event.preventDefault();
    const { password, username } = event.target.elements;
    seterror({
      username: "",
      password: "",
    });
    if (password.value.includes(" ")) {
      showError("password", "Password cannot have spaces in between");
    }

    if (username.value.includes(" ")) {
      showError("username", "Username cannot have spaces in between");
    }
    // if (password.value.length < 6) {
    //   seterror({
    //     username: "",
    //     password: "Password should be greater in length ",
    //   });
    // }
    if (username.value === "") {
      showError("username", "Username cannot be empty");
    }
    if (password.value === "") {
      showError("password", "Password cannot be empty");
    }
    const val: any = await api(username.value, password.value);
    console.log(val.data.token);
  };

  function showError(type: "username" | "password" | "email", error: string) {
    seterror((prevState) => ({
      ...prevState,
      [type]: error,
    }));
    //  return {
    //    ...values,
    //    [type]: error
    //   });
  }
  async function api(username: string, password: string) {
    return await axios({
      method: "POST",
      url: "http://localhost:3001/user/login",
      data: {
        username,
        password, // This is the body part
      },
    }).catch((err) => {
      console.log(err.response.data);
    });
  }
  return (
    <div className="container">
      <form onSubmit={submit}>
        <h1>Login</h1>
        <hr className="solid"></hr>
        <div className="fields">
          <label>Username</label>
          <input
            type="text"
            // minLength={10}
            // maxLength={20}
            name="username"
            placeholder="Username"
            onChange={usernamecheck}
          ></input>
        </div>
        <div className="fields">
          <label>Password</label>
          <input
            type="password"
            name="password"
            placeholder="Password"
            onChange={passcheck}
          ></input>
        </div>
        <div className="error">
          {error.username}
          {error.password}
        </div>
        <div className="button">
          <button type="submit">Login</button>
        </div>
      </form>
    </div>
  );
}

export default Login;















import {
  Routes,
  Route,
  BrowserRouter,
  Link,
  Navigate,
  Outlet
} from "react-router-dom";

export default function App() {
  return (
    <BrowserRouter>
      <MyMenu />
      <Routes>
        <Route path="/" element={<Public />} />
        <Route path="/private-outlet" element={<PrivateOutlet />}>
          <Route path="" element={<Private />} />
        </Route>
        <Route
          path="/private-nested"
          element={
            <PrivateRoute>
              <Private />
            </PrivateRoute>
          }
        />
        <Route path="/login" element={<Login />} />
      </Routes>
    </BrowserRouter>
  );
}

const Public = () => <div>public</div>;
const Private = () => <div>private</div>;
const Login = () => <div>login</div>;

function PrivateOutlet() {
  const auth = useAuth();
  return auth ? <Outlet /> : <Navigate to="/login" />;
}

function PrivateRoute({ children }) {
  const auth = useAuth();
  return auth ? children : <Navigate to="/login" />;
}

function useAuth() {
  return true;
}

function MyMenu() {
  return (
    <nav>
      <Link to="/">Public</Link>
      {" | "}
      <Link to="/private-nested">Private Using Nested</Link>
      {" | "}
      <Link to="/private-outlet">Private Using Outlet</Link>
    </nav>
  );
}
